{
  "scope": "source.c99 - source.c",
  "completions": [
    "GLIB_DISABLE_DEPRECATION_WARNINGS",
    "GLIB_VERSION_MIN_REQUIRED",
    "GLIB_VERSION_MAX_ALLOWED",
    {"trigger": "glib_check_version", "contents": "glib_check_version (${1:guint required_major}, ${2:guint required_minor}, ${3:guint required_micro})"},
    "GLIB_VERSION_2_26",
    "GLIB_VERSION_2_28",
    "GLIB_VERSION_MIN_REQUIRED",
    "GLIB_VERSION_2_26",
    "GLIB_VERSION_2_28",
    "GLIB_VERSION_MAX_ALLOWED",
    {"trigger": "GLIB_CHECK_VERSION", "contents": "GLIB_CHECK_VERSION (${1:major}, ${2:minor}, ${3:micro})"},
    "GLIB_VERSION_MIN_REQUIRED",

    {"trigger": "G_GINT64_CONSTANT", "contents": "G_GINT64_CONSTANT (${1:val})"},
    {"trigger": "G_GUINT64_CONSTANT", "contents": "G_GUINT64_CONSTANT (${1:val})"},
    {"trigger": "G_GOFFSET_CONSTANT", "contents": "G_GOFFSET_CONSTANT (${1:val})"},
    "gboolean",
    "gpointer",
    "gconstpointer",
    "gchar",
    "guchar",
    "gint",
    "G_MININT",
    "G_MAXINT",
    "guint",
    "G_MAXUINT",
    "gshort",
    "G_MINSHORT",
    "G_MAXSHORT",
    "gushort",
    "G_MAXUSHORT",
    "glong",
    "G_MINLONG",
    "G_MAXLONG",
    "gulong",
    "G_MAXULONG",
    "gint8",
    "G_MININT8",
    "G_MAXINT8",
    "guint8",
    "G_MAXUINT8",
    "gint16",
    "G_MININT16",
    "G_MAXINT16",
    "G_GINT16_MODIFIER",
    "G_GINT16_FORMAT",
    "guint16",
    "G_MAXUINT16",
    "G_GUINT16_FORMAT",
    "gint32",
    "G_MININT32",
    "G_MAXINT32",
    "G_GINT32_MODIFIER",
    "G_GINT32_FORMAT",
    "guint32",
    "G_MAXUINT32",
    "G_GUINT32_FORMAT",
    "gint64",
    "G_MININT64",
    "G_MAXINT64",
    "G_GINT64_MODIFIER",
    "G_GINT64_FORMAT",
    "guint64",
    "G_MAXUINT64",
    "G_GUINT64_FORMAT",
    "gfloat",
    "G_MINFLOAT",
    "G_MAXFLOAT",
    "gdouble",
    "G_MINDOUBLE",
    "G_MAXDOUBLE",
    "gsize",
    "G_MAXSIZE",
    "G_GSIZE_MODIFIER",
    "G_GSIZE_FORMAT",
    "gssize",
    "G_MINSSIZE",
    "G_MAXSSIZE",
    "G_GSSIZE_FORMAT",
    "goffset",
    "G_MINOFFSET",
    "G_MAXOFFSET",
    "G_GOFFSET_MODIFIER",
    "G_GOFFSET_FORMAT",
    "gintptr",
    "G_GINTPTR_MODIFIER",
    "G_GINTPTR_FORMAT",
    "guintptr",
    "G_GUINTPTR_FORMAT",

    {"trigger": "G_IS_DIR_SEPARATOR", "contents": "G_IS_DIR_SEPARATOR (${1:'/'})"},
    "NULL",
    {"trigger": "MIN", "contents": "MIN (${1:a}, ${2:b})"},
    {"trigger": "MAX", "contents": "MAX (${1:a}, ${2:b})"},
    {"trigger": "ABS", "contents": "ABS (${1:a})"},
    {"trigger": "CLAMP", "contents": "CLAMP (${1:x}, ${2:low}, ${3:hight})"},
    {"trigger": "G_STRUCT_MEMBER", "contents": "G_STRUCT_MEMBER (${1:member_type}, ${2:struct_p}, ${3:struct_offset})"},
    {"trigger": "G_STRUCT_MEMBER_P", "contents": "G_STRUCT_MEMBER_P (${1:struct_p}, ${2:struct_offset})"},
    {"trigger": "G_STRUCT_OFFSET", "contents": "G_STRUCT_OFFSET (${1:struct_type}, ${2:member})"},
    {"trigger": "G_N_ELEMENTS", "contents": "G_N_ELEMENTS (${1:arr})"},
    "G_OS_WIN32",
    "G_OS_UNIX",
    "G_DIR_SEPARATOR",
    "G_DIR_SEPARATOR_S",
    "G_SEARCHPATH_SEPARATOR",
    "G_SEARCHPATH_SEPARATOR_S",
    "TRUE",
    "FALSE",
    "G_MEM_ALIGN",
    "G_CONST_RETURN",

    {"trigger": "GINT_TO_POINTER", "contents": "GINT_TO_POINTER (${1:i})"},
    {"trigger": "GPOINTER_TO_INT", "contents": "GPOINTER_TO_INT (${1:i})"},
    {"trigger": "GUINT_TO_POINTER", "contents": "GUINT_TO_POINTER (${1:u})"},
    {"trigger": "GPOINTER_TO_UINT", "contents": "GPOINTER_TO_UINT (${1:u})"},
    {"trigger": "GSIZE_TO_POINTER", "contents": "GSIZE_TO_POINTER (${1:s})"},
    {"trigger": "GPOINTER_TO_SIZE", "contents": "GPOINTER_TO_SIZE (${1:s})"},

    {"trigger": "g_htonl", "contents": "g_htonl (${1:val})"},
    {"trigger": "g_htons", "contents": "g_htons (${1:val})"},
    {"trigger": "g_ntohl", "contents": "g_ntohl (${1:val})"},
    {"trigger": "g_ntohs", "contents": "g_ntohs (${1:val})"},
    {"trigger": "GINT_FROM_BE", "contents": "GINT_FROM_BE (${1:val})"},
    {"trigger": "GINT_FROM_LE", "contents": "GINT_FROM_LE (${1:val})"},
    {"trigger": "GINT_TO_BE", "contents": "GINT_TO_BE (${1:val})"},
    {"trigger": "GINT_TO_LE", "contents": "GINT_TO_LE (${1:val})"},
    {"trigger": "GUINT_FROM_BE", "contents": "GUINT_FROM_BE (${1:val})"},
    {"trigger": "GUINT_FROM_LE", "contents": "GUINT_FROM_LE (${1:val})"},
    {"trigger": "GUINT_TO_BE", "contents": "GUINT_TO_BE (${1:val})"},
    {"trigger": "GUINT_TO_LE", "contents": "GUINT_TO_LE (${1:val})"},
    {"trigger": "GLONG_FROM_BE", "contents": "GLONG_FROM_BE (${1:val})"},
    {"trigger": "GLONG_FROM_LE", "contents": "GLONG_FROM_LE (${1:val})"},
    {"trigger": "GLONG_TO_BE", "contents": "GLONG_TO_BE (${1:val})"},
    {"trigger": "GLONG_TO_LE", "contents": "GLONG_TO_LE (${1:val})"},
    {"trigger": "GULONG_FROM_BE", "contents": "GULONG_FROM_BE (${1:val})"},
    {"trigger": "GULONG_FROM_LE", "contents": "GULONG_FROM_LE (${1:val})"},
    {"trigger": "GULONG_TO_BE", "contents": "GULONG_TO_BE (${1:val})"},
    {"trigger": "GULONG_TO_LE", "contents": "GULONG_TO_LE (${1:val})"},
    {"trigger": "GSIZE_FROM_BE", "contents": "GSIZE_FROM_BE (${1:val})"},
    {"trigger": "GSIZE_FROM_LE", "contents": "GSIZE_FROM_LE (${1:val})"},
    {"trigger": "GSIZE_TO_BE", "contents": "GSIZE_TO_BE (${1:val})"},
    {"trigger": "GSIZE_TO_LE", "contents": "GSIZE_TO_LE (${1:val})"},
    {"trigger": "GSSIZE_FROM_BE", "contents": "GSSIZE_FROM_BE (${1:val})"},
    {"trigger": "GSSIZE_FROM_LE", "contents": "GSSIZE_FROM_LE (${1:val})"},
    {"trigger": "GSSIZE_TO_BE", "contents": "GSSIZE_TO_BE (${1:val})"},
    {"trigger": "GSSIZE_TO_LE", "contents": "GSSIZE_TO_LE (${1:val})"},
    {"trigger": "GINT16_FROM_BE", "contents": "GINT16_FROM_BE (${1:val})"},
    {"trigger": "GINT16_FROM_LE", "contents": "GINT16_FROM_LE (${1:val})"},
    {"trigger": "GINT16_TO_BE", "contents": "GINT16_TO_BE (${1:val})"},
    {"trigger": "GINT16_TO_LE", "contents": "GINT16_TO_LE (${1:val})"},
    {"trigger": "GUINT16_FROM_BE", "contents": "GUINT16_FROM_BE (${1:val})"},
    {"trigger": "GUINT16_FROM_LE", "contents": "GUINT16_FROM_LE (${1:val})"},
    {"trigger": "GUINT16_TO_BE", "contents": "GUINT16_TO_BE (${1:val})"},
    {"trigger": "GUINT16_TO_LE", "contents": "GUINT16_TO_LE (${1:val})"},
    {"trigger": "GINT32_FROM_BE", "contents": "GINT32_FROM_BE (${1:val})"},
    {"trigger": "GINT32_FROM_LE", "contents": "GINT32_FROM_LE (${1:val})"},
    {"trigger": "GINT32_TO_BE", "contents": "GINT32_TO_BE (${1:val})"},
    {"trigger": "GINT32_TO_LE", "contents": "GINT32_TO_LE (${1:val})"},
    {"trigger": "GUINT32_FROM_BE", "contents": "GUINT32_FROM_BE (${1:val})"},
    {"trigger": "GUINT32_FROM_LE", "contents": "GUINT32_FROM_LE (${1:val})"},
    {"trigger": "GUINT32_TO_BE", "contents": "GUINT32_TO_BE (${1:val})"},
    {"trigger": "GUINT32_TO_LE", "contents": "GUINT32_TO_LE (${1:val})"},
    {"trigger": "GINT64_FROM_BE", "contents": "GINT64_FROM_BE (${1:val})"},
    {"trigger": "GINT64_FROM_LE", "contents": "GINT64_FROM_LE (${1:val})"},
    {"trigger": "GINT64_TO_BE", "contents": "GINT64_TO_BE (${1:val})"},
    {"trigger": "GINT64_TO_LE", "contents": "GINT64_TO_LE (${1:val})"},
    {"trigger": "GUINT64_FROM_BE", "contents": "GUINT64_FROM_BE (${1:val})"},
    {"trigger": "GUINT64_FROM_LE", "contents": "GUINT64_FROM_LE (${1:val})"},
    {"trigger": "GUINT64_TO_BE", "contents": "GUINT64_TO_BE (${1:val})"},
    {"trigger": "GUINT16_SWAP_BE_PDP", "contents": "GUINT16_SWAP_BE_PDP (${1:val})"},
    {"trigger": "GUINT16_SWAP_LE_BE", "contents": "GUINT16_SWAP_LE_BE (${1:val})"},
    {"trigger": "GUINT16_SWAP_LE_PDP", "contents": "GUINT16_SWAP_LE_PDP (${1:val})"},
    {"trigger": "GUINT32_SWAP_BE_PDP", "contents": "GUINT32_SWAP_BE_PDP (${1:val})"},
    {"trigger": "GUINT32_SWAP_LE_BE", "contents": "GUINT32_SWAP_LE_BE (${1:val})"},
    {"trigger": "GUINT32_SWAP_LE_PDP", "contents": "GUINT32_SWAP_LE_PDP (${1:val})"},
    {"trigger": "GUINT64_SWAP_LE_BE", "contents": "GUINT64_SWAP_LE_BE (${1:val})"},
    {"trigger": "GUINT64_TO_BE", "contents": "GUINT64_TO_BE (${1:val})"},
    "G_BYTE_ORDER",
    "G_LITTLE_ENDIAN",
    "G_BIG_ENDIAN",
    "G_PDP_ENDIAN",

    "G_IEEE754_FLOAT_BIAS",
    "G_IEEE754_DOUBLE_BIAS",
    "GFloatIEEE754",
    "GDoubleIEEE754",
    "G_E",
    "G_LN2",
    "G_LN10",
    "G_PI",
    "G_PI_2",
    "G_PI_4",
    "G_SQRT2",
    "G_LOG_2_BASE_10",

    {"trigger": "G_VA_COPY", "contents": "G_VA_COPY (${1:ap1}, ${2:ap2})"},
    {"trigger": "G_STRINGIFY", "contents": "G_STRINGIFY (${1:macro_or_string})"},
    {"trigger": "G_PASTE", "contents": "G_PASTE (${1:identifier1}, ${2:identifier2})"},
    {"trigger": "G_STATIC_ASSERT", "contents": "G_STATIC_ASSERT (${1:expr})"},
    {"trigger": "G_STATIC_ASSERT_EXPR", "contents": "G_STATIC_ASSERT_EXPR (${1:expr})"},
    {"trigger": "G_GNUC_ALLOC_SIZE", "contents": "G_GNUC_ALLOC_SIZE (${1:x})"},
    {"trigger": "G_GNUC_ALLOC_SIZE2", "contents": "G_GNUC_ALLOC_SIZE2 (${1:x}, ${2:y})"},
    {"trigger": "G_GNUC_DEPRECATED_FOR", "contents": "G_GNUC_DEPRECATED_FOR (${1:f})"},
    {"trigger": "G_GNUC_PRINTF", "contents": "G_GNUC_PRINTF (${1:format_idx}, ${2:arg_idx})"},
    {"trigger": "G_GNUC_SCANF", "contents": "G_GNUC_SCANF (${1:format_idx}, ${2:arg_idx})"},
    {"trigger": "G_GNUC_FORMAT", "contents": "G_GNUC_FORMAT (${1:arg_idx})"},
    {"trigger": "G_DEPRECATED_FOR", "contents": "G_DEPRECATED_FOR (${1:f})"},
    {"trigger": "G_UNAVAILABLE", "contents": "G_UNAVAILABLE (${1:maj}, ${2:min})"},
    {"trigger": "G_LIKELY", "contents": "G_LIKELY (${1:expr})"},
    "G_UNLIKELY",
    "G_STRFUNC",
    "G_INLINE_FUNC",
    "G_STMT_START",
    "G_STMT_END",
    "G_BEGIN_DECLS",
    "G_END_DECLS",
    "G_GNUC_EXTENSION",
    "G_GNUC_CONST",
    "G_GNUC_PURE",
    "G_GNUC_MALLOC",
    "G_GNUC_DEPRECATED",
    "G_GNUC_BEGIN_IGNORE_DEPRECATIONS",
    "G_GNUC_END_IGNORE_DEPRECATIONS",
    "G_GNUC_NORETURN",
    "G_GNUC_UNUSED",
    "G_GNUC_NULL_TERMINATED",
    "G_GNUC_WARN_UNUSED_RESULT",
    "G_GNUC_FUNCTION",
    "G_GNUC_PRETTY_FUNCTION",
    "G_GNUC_NO_INSTRUMENT",
    "G_HAVE_GNUC_VISIBILITY",
    "G_GNUC_INTERNAL",
    "G_GNUC_MAY_ALIAS",
    "G_DEPRECATED",
    "G_STRLOC",

    {"trigger": "g_atomic_int_get", "contents": "g_atomic_int_get (${1:const volatile gint *atomic})"},
    {"trigger": "g_atomic_int_set", "contents": "g_atomic_int_set (${1:volatile gint *atomic}, ${2:gint newval})"},
    {"trigger": "g_atomic_int_inc", "contents": "g_atomic_int_inc (${1:gint *atomic})"},
    {"trigger": "g_atomic_int_dec_and_test", "contents": "g_atomic_int_dec_and_test (${1:gint *atomic})"},
    {"trigger": "g_atomic_int_compare_and_exchange", "contents": "g_atomic_int_compare_and_exchange (${1:volatile gint *atomic}, ${2:gint oldval}, ${3:gint newval})"},
    {"trigger": "g_atomic_int_add", "contents": "g_atomic_int_add (${1:volatile gint *atomic}, ${2:gint val})"},
    {"trigger": "g_atomic_int_and", "contents": "g_atomic_int_and (${1:volatile guint *atomic}, ${2:guint val})"},
    {"trigger": "g_atomic_int_or", "contents": "g_atomic_int_or (${1:volatile guint *atomic}, ${2:guint val})"},
    {"trigger": "g_atomic_int_xor", "contents": "g_atomic_int_xor (${1:volatile guint *atomic}, ${2:guint val})"},
    {"trigger": "g_atomic_pointer_get", "contents": "g_atomic_pointer_get (${1:const volatile void *atomic})"},
    {"trigger": "g_atomic_pointer_set", "contents": "g_atomic_pointer_set (${1:volatile void *atomic}, ${2:gpointer newval})"},
    {"trigger": "g_atomic_pointer_compare_and_exchange", "contents": "g_atomic_pointer_compare_and_exchange (${1:volatile void *atomic}, ${2:gpointer oldval}, ${3:gpointer newval})"},
    {"trigger": "g_atomic_pointer_add", "contents": "g_atomic_pointer_add (${1:volatile void *atomic}, ${2:gssize val})"},
    {"trigger": "g_atomic_pointer_and", "contents": "g_atomic_pointer_and (${1:volatile void *atomic}, ${2:gsize val})"},
    {"trigger": "g_atomic_pointer_or", "contents": "g_atomic_pointer_or (${1:volatile void *atomic}, ${2:gsize val})"},
    {"trigger": "g_atomic_pointer_xor", "contents": "g_atomic_pointer_xor (${1:volatile void *atomic}, ${2:gsize val})"},
    {"trigger": "g_atomic_int_exchange_and_add", "contents": "g_atomic_int_exchange_and_add (${1:volatile gint *atomic}, ${2:gint val})"},
    "G_ATOMIC_LOCK_FREE",

    {"trigger": "g_main_loop_new", "contents": "g_main_loop_new (${1:GMainContext *context}, ${2:gboolean is_running})"},
    {"trigger": "g_main_loop_ref", "contents": "g_main_loop_ref (${1:GMainLoop *loop})"},
    {"trigger": "g_main_loop_unref", "contents": "g_main_loop_unref (${1:GMainLoop *loop})"},
    {"trigger": "g_main_loop_run", "contents": "g_main_loop_run (${1:GMainLoop *loop})"},
    {"trigger": "g_main_loop_quit", "contents": "g_main_loop_quit (${1:GMainLoop *loop})"},
    {"trigger": "g_main_loop_is_running", "contents": "g_main_loop_is_running (${1:GMainLoop *loop})"},
    {"trigger": "g_main_loop_get_context", "contents": "g_main_loop_get_context (${1:GMainLoop *loop})"},
    {"trigger": "g_main_new", "contents": "g_main_new (${1:is_running})"},
    {"trigger": "g_main_destroy", "contents": "g_main_destroy (${1:loop})"},
    {"trigger": "g_main_run", "contents": "g_main_run (${1:loop})"},
    {"trigger": "g_main_quit", "contents": "g_main_quit (${1:loop})"},
    {"trigger": "g_main_is_running", "contents": "g_main_is_running (${1:loop})"},
    {"trigger": "g_main_context_new", "contents": "g_main_context_new ()"},
    {"trigger": "g_main_context_ref", "contents": "g_main_context_ref (${1:GMainContext *context})"},
    {"trigger": "g_main_context_unref", "contents": "g_main_context_unref (${1:GMainContext *context})"},
    {"trigger": "g_main_context_default", "contents": "g_main_context_default ()"},
    {"trigger": "g_main_context_iteration", "contents": "g_main_context_iteration (${1:GMainContext *context}, ${2:gboolean may_block})"},
    {"trigger": "g_main_iteration", "contents": "g_main_iteration (${1:may_block})"},
    {"trigger": "g_main_context_pending", "contents": "g_main_context_pending (${1:GMainContext *context})"},
    {"trigger": "g_main_pending", "contents": "g_main_pending ()"},
    {"trigger": "g_main_context_find_source_by_id", "contents": "g_main_context_find_source_by_id (${1:GMainContext *context}, ${2:guint source_id})"},
    {"trigger": "g_main_context_find_source_by_user_data", "contents": "g_main_context_find_source_by_user_data (${1:GMainContext *context}, ${2:gpointer user_data})"},
    {"trigger": "g_main_context_find_source_by_funcs_user_data", "contents": "g_main_context_find_source_by_funcs_user_data (${1:GMainContext *context}, ${2:GSourceFuncs *funcs}, ${3:gpointer user_data})"},
    {"trigger": "g_main_context_wakeup", "contents": "g_main_context_wakeup (${1:GMainContext *context})"},
    {"trigger": "g_main_context_acquire", "contents": "g_main_context_acquire (${1:GMainContext *context})"},
    {"trigger": "g_main_context_release", "contents": "g_main_context_release (${1:GMainContext *context})"},
    {"trigger": "g_main_context_is_owner", "contents": "g_main_context_is_owner (${1:GMainContext *context})"},
    {"trigger": "g_main_context_wait", "contents": "g_main_context_wait (${1:GMainContext *context}, ${2:GCond *cond}, ${3:GMutex *mutex})"},
    {"trigger": "g_main_context_prepare", "contents": "g_main_context_prepare (${1:GMainContext *context}, ${2:gint *priority})"},
    {"trigger": "g_main_context_query", "contents": "g_main_context_query (${1:GMainContext *context}, ${2:gint max_priority}, ${3:gint *timeout_}, ${4:GPollFD *fds}, ${5:gint n_fds})"},
    {"trigger": "g_main_context_check", "contents": "g_main_context_check (${1:GMainContext *context}, ${2:gint max_priority}, ${3:GPollFD *fds}, ${4:gint n_fds})"},
    {"trigger": "g_main_context_dispatch", "contents": "g_main_context_dispatch (${1:GMainContext *context})"},
    {"trigger": "g_main_context_set_poll_func", "contents": "g_main_context_set_poll_func (${1:GMainContext *context, ${2:GPollFunc func})"},
    {"trigger": "g_main_context_get_poll_func", "contents": "g_main_context_get_poll_func (${1:GMainContext *context})"},
    {"trigger": "GPollFunc", "context": "GPollFunc (${1:GPollFD *ufds, ${2:guint nfsd}, ${3:gint timeout_})"},
    {"trigger": "g_main_context_add_poll", "context": "g_main_context_add_poll (${1:GMainContext *context}, ${2:GPollFD *fd}, ${3:gint priority})"},
    {"trigger": "g_main_context_remove_poll", "context": "g_main_context_remove_poll (${1:GMainContext *context}, ${2:GPollFD *fd})"},
    {"trigger": "g_main_depth", "context": "g_main_depth ()"},
    {"trigger": "g_main_current_source", "context": "g_main_current_source ()"},
    {"trigger": "g_main_set_poll_func", "context": "g_main_set_poll_func (${1:func})"},
    {"trigger": "g_main_context_invoke", "context": "g_main_context_invoke (${1:GMainContext *context}, ${2:GSourceFunc function}, ${3:gpointer data})"},
    {"trigger": "g_main_context_invoke_full", "context": "g_main_context_invoke_full (${1:GMainContext *context}, ${2:gint priority}, ${3:GSourceFunc function}, ${4:gpointer data}, ${5:GDestroyNotify notify})"}, 
    {"trigger": "g_main_context_get_thread_default", "context": "g_main_context_get_thread_default ()"},
    {"trigger": "g_main_context_ref_thread_default", "context": "g_main_context_ref_thread_default ()"},
    {"trigger": "g_main_context_push_thread_default", "context": "g_main_context_push_thread_default (${1:GMainContext *context})"},
    {"trigger": "g_main_context_pop_thread_default", "context": "g_main_context_pop_thread_default (${1:GMainContext *context})"},
    {"trigger": "g_timeout_source_new", "context": "g_timeout_source_new (${1:guint interval})"},
    {"trigger": "g_timeout_source_new_seconds", "context": "g_timeout_source_new_seconds (${1:guint interval})"},
    {"trigger": "g_timeout_add", "context": "g_timeout_add (${1:guint interval}, ${2:GSourceFunc function}, ${3:gpointer data})"},
    {"trigger": "g_timeout_add_full", "context": "g_timeout_add_full (${1:gint priority}, ${2:guint interval}, ${3:GSourceFunc function}, ${4:gpointer data}, ${5:GDestroyNotify notify})"},
    {"trigger": "g_timeout_add_seconds", "context": "g_timeout_add_seconds (${1:guint interval}, ${2:GSourceFunc function}, ${3:gpointer data})"},
    {"trigger": "g_timeout_add_seconds_full", "context": "g_timeout_add_seconds_full (${1:gint priority}, ${2:guint interval}, ${3:GSourceFunc function}, ${4:gpointer data}, ${5:GDestroyNotify notify})"},
    {"trigger": "g_idle_source_new", "context": "g_idle_source_new ()"},
    {"trigger": "g_idle_add", "context": "g_idle_add (${1:GSourceFunc function}, ${2:gpointer data})"},
    {"trigger": "g_idle_add_full", "context": "g_idle_add_full (${1:gint priority}, ${2:GSourceFunc function}, ${3:gpointer data}, ${4:GDestroyNotify notify})"},
    {"trigger": "g_idle_remove_by_data", "context": "g_idle_remove_by_data (${1:gpointer data})"},
    {"trigger": "GChildWatchFunc", "context": "GChildWatchFunc (${1:GPid pid}, ${2:gint status}, ${3:gpointer user_data})"},
    {"trigger": "g_child_watch_source_new", "context": "g_child_watch_source_new (${1:GPid pid})"},
    {"trigger": "g_child_watch_add", "context": "g_child_watch_add (${1:GPid pid}, ${2:GChildWatchFunc function}, ${3:gpointer data})"},
    {"trigger": "g_child_watch_add_full", "context": "g_child_watch_add_full (${1:gint priority}, ${2:GPid pid}, ${3:GChildWatchFunc function}, ${4:gpointer data}, ${5:GDestroyNotify notify})"},
    {"trigger": "g_poll", "context": "g_poll (${1:GPollFD *fds}, ${2:guint nfds}, ${3:gint timeout})"},
    {"trigger": "GSourceDummyMarshal", "context": "GSourceDummyMarshal ()"},
    {"trigger": "g_source_new", "context": "g_source_new (${1:GSourceFuncs *source_funcs}, ${2:guint struct_size})"},
    {"trigger": "g_source_ref", "context": "g_source_ref (${1:GSource *source})"},
    {"trigger": "g_source_unref", "context": "g_source_unref (${1:GSource *source})"},
    {"trigger": "g_source_set_funcs", "context": "g_source_set_funcs (${1:GSource *source}, ${2:GSourceFuncs *funcs})"},
    {"trigger": "g_source_attach", "context": "g_source_attach (${1:GSource *source}, ${2:GMainContext *context})"},
    {"trigger": "g_source_destroy", "context": "g_source_destroy (${1:GSource *source})"},
    {"trigger": "g_source_is_destroyed", "context": "g_source_is_destroyed (${1:GSource *source})"},
    {"trigger": "g_source_set_priority", "context": "g_source_set_priority (${1:GSource *source}, ${2:gint priority})"},
    {"trigger": "g_source_get_priority", "context": "g_source_get_priority (${1:GSource *source})"},
    {"trigger": "g_source_set_can_recurse", "context": "g_source_set_can_recurse (${1:GSource *source}, ${2:gboolean can_recurse})"},
    {"trigger": "g_source_get_can_recurse", "context": "g_source_get_can_recurse (${1:GSource *source})"},
    {"trigger": "g_source_get_id", "context": "g_source_get_id (${1:GSource *source})"},
    {"trigger": "g_source_get_name", "context": "g_source_get_name (${1:GSource *source})"},
    {"trigger": "g_source_set_name", "context": "g_source_set_name (${1:GSource *source}, ${2:const char *name})"},
    {"trigger": "g_source_set_name_by_id", "context": "g_source_set_name_by_id (${1:guint tag}, ${2:const char *name})"},
    {"trigger": "g_source_get_context", "context": "g_source_get_context (${1:GSource *source})"},
    {"trigger": "g_source_set_callback", "context": "g_source_set_callback (${1:GSource *source}, ${2:GSourceFunc func}, ${3:gpointer data}, ${4:GDestroyNotify notify})"},
    {"trigger": "GSourceFunc", "context": "GSourceFunc (${1:gpointer user_data})"},
    {"trigger": "g_source_set_callback_indirect", "context": "g_source_set_callback_indirect (${1:GSource *source}, ${2:gpointer callback_data}, ${3:GSourceCallbackFuncs *callback_funcs})"},
    {"trigger": "g_source_set_ready_time", "context": "g_source_set_ready_time (${1:GSource *source}, ${2:gint64 ready_time})"},
    {"trigger": "g_source_get_ready_time", "context": "g_source_get_ready_time (${1:GSource *source})"},
    {"trigger": "g_source_add_unix_fd", "context": "g_source_add_unix_fd (${1:GSource *source}, ${2:gint fd}, ${3:GIOCondition events})"},
    {"trigger": "g_source_remove_unix_fd", "context": "g_source_remove_unix_fd (${1:GSource *source}, ${2:gpointer tag})"},
    {"trigger": "g_source_modify_unix_fd", "context": "g_source_modify_unix_fd (${1:GSource *source}, ${2:gpointer tag}, ${3:GIOCondition new_events})"},
    {"trigger": "g_source_query_unix_fd", "context": "g_source_query_unix_fd (${1:GSource *source}, ${2:gpointer tag})"},
    {"trigger": "g_source_add_poll", "context": "g_source_add_poll (${1:GSource *source}, ${2:GPollFD *fd})"},
    {"trigger": "g_source_remove_poll", "context": "g_source_remove_poll ()"},
    {"trigger": "g_source_add_child_source", "context": "g_source_add_child_source ()"},
    {"trigger": "g_source_remove_child_source", "context": "g_source_remove_child_source ()"},
    {"trigger": "g_source_get_time", "context": "g_source_get_time ()"},
    {"trigger": "g_source_get_current_time", "context": "g_source_get_current_time ()"},
    {"trigger": "g_source_remove", "context": "g_source_remove ()"},
    {"trigger": "g_source_remove_by_funcs_user_data", "context": "g_source_remove_by_funcs_user_data ()"},
    {"trigger": "g_source_remove_by_user_data", "context": "g_source_remove_by_user_data ()"},
    "GMainLoop",
    "G_PRIORITY_HIGH",
    "G_PRIORITY_DEFAULT",
    "G_PRIORITY_HIGH_IDLE",
    "G_PRIORITY_DEFAULT_IDLE",
    "G_PRIORITY_LOW",
    "G_SOURCE_CONTINUE",
    "G_SOURCE_REMOVE",
    "GMainContext",
    "GPid",
    "GPollFD",
    "G_POLLFD_FORMAT",
    "GSource",
    "GSourceFuncs",
    "GSourceCallbackFuncs",

    {"trigger": "GThreadFunc", "contents": "GThreadFunc (${1:gpointer data})"},
    {"trigger": "g_thread_new", "contents": "g_thread_new (${1:const gchar *name}, ${2:GThreadFunc func}, ${3:gpointer data})"},
    {"trigger": "g_thread_try_new", "contents": "g_thread_try_new (${1:const gchar *name}, ${2:GThreadFunc func}, ${3:gpointer data}, ${4:GError **error})"},
    {"trigger": "g_thread_ref", "contents": "g_thread_ref (${1:GThread *thread})"},
    {"trigger": "g_thread_unref", "contents": "g_thread_unref (${1:GThread *thread})"},
    {"trigger": "g_thread_join", "contents": "g_thread_join (${1:GThread *thread})"},
    {"trigger": "g_thread_yield", "contents": "g_thread_yield ()"},
    {"trigger": "g_thread_exit", "contents": "g_thread_exit (${1:gpointer retval})"},
    {"trigger": "g_thread_self", "contents": "g_thread_self ()"},
    {"trigger": "g_mutex_init", "contents": "g_mutex_init (${1:GMutex *mutex})"},
    {"trigger": "g_mutex_clear", "contents": "g_mutex_clear (${1:GMutex *mutex})"},
    {"trigger": "g_mutex_lock", "contents": "g_mutex_lock (${1:GMutex *mutex})"},
    {"trigger": "g_mutex_trylock", "contents": "g_mutex_trylock (${1:GMutex *mutex})"},
    {"trigger": "g_mutex_unlock", "contents": "g_mutex_unlock (${1:GMutex *mutex})"},
    {"trigger": "G_LOCK_DEFINE", "contents": "G_LOCK_DEFINE (${1:name})"},
    {"trigger": "G_LOCK_DEFINE_STATIC", "contents": "G_LOCK_DEFINE_STATIC (${1:name})"},
    {"trigger": "G_LOCK_EXTERN", "contents": "G_LOCK_EXTERN (${1:name})"},
    {"trigger": "G_LOCK", "contents": "G_LOCK (${1:name})"},
    {"trigger": "G_TRYLOCK", "contents": "G_TRYLOCK (${1:name})"},
    {"trigger": "G_UNLOCK", "contents": "G_UNLOCK (${1:name})"},
    {"trigger": "g_rec_mutex_init", "contents": "g_rec_mutex_init (${1:GRecMutex *rec_mutex})"},
    {"trigger": "g_rec_mutex_clear", "contents": "g_rec_mutex_clear (${1:GRecMutex *rec_mutex})"},
    {"trigger": "g_rec_mutex_lock", "contents": "g_rec_mutex_lock (${1:GRecMutex *rec_mutex})"},
    {"trigger": "g_rec_mutex_trylock", "contents": "g_rec_mutex_trylock (${1:GRecMutex *rec_mutex})"},
    {"trigger": "g_rec_mutex_unlock", "contents": "g_rec_mutex_unlock (${1:GRecMutex *rec_mutex})"},
    {"trigger": "g_rw_lock_init", "contents": "g_rw_lock_init (${1:GRWLock *rw_lock})"},
    {"trigger": "g_rw_lock_clear", "contents": "g_rw_lock_clear (${1:GRWLock *rw_lock})"},
    {"trigger": "g_rw_lock_writer_lock", "contents": "g_rw_lock_writer_lock (${1:GRWLock *rw_lock})"},
    {"trigger": "g_rw_lock_writer_trylock", "contents": "g_rw_lock_writer_trylock (${1:GRWLock *rw_lock})"},
    {"trigger": "g_rw_lock_writer_unlock", "contents": "g_rw_lock_writer_unlock (${1:GRWLock *rw_lock})"},
    {"trigger": "g_rw_lock_reader_lock", "contents": "g_rw_lock_reader_lock (${1:GRWLock *rw_lock})"},
    {"trigger": "g_rw_lock_reader_trylock", "contents": "g_rw_lock_reader_trylock (${1:GRWLock *rw_lock})"},
    {"trigger": "g_rw_lock_reader_unlock", "contents": "g_rw_lock_reader_unlock (${1:GRWLock *rw_lock})"},
    {"trigger": "g_cond_init", "contents": "g_cond_init (${1:GCond *cond})"},
    {"trigger": "g_cond_clear", "contents": "g_cond_clear (${1:GCond *cond})"},
    {"trigger": "g_cond_wait", "contents": "g_cond_wait (${1:GCond *cond}, ${2:GMutex *mutex})"},
    {"trigger": "g_cond_timed_wait", "contents": "g_cond_timed_wait (${1:GCond *cond}, ${2:GMutex *mutex}, ${3:GTimeVal *abs_time})"},
    {"trigger": "g_cond_wait_until", "contents": "g_cond_wait_until (${1:GCond *cond, ${2:GMutex *mutex}, ${3:gint64 end_time})"},
    {"trigger": "g_cond_signal", "contents": "g_cond_signal (${1:GCond *cond})"},
    {"trigger": "g_cond_broadcast", "contents": "g_cond_broadcast (${1:GCond *cond})"},
    {"trigger": "G_PRIVATE_INIT", "contents": "G_PRIVATE_INIT (${1:notify})"},
    {"trigger": "g_private_get", "contents": "g_private_get (${1:GPrivate *key})"},
    {"trigger": "g_private_set", "contents": "g_private_set (${1:GPrivate *key}, ${2:gpointer value})"},
    {"trigger": "g_private_replace", "contents": "g_private_replace (${1:GPrivate *key}, ${2:gpointer value})"},
    {"trigger": "g_once", "contents": "g_once (${1:once}, ${2:func}, ${3:arg})"},
    {"trigger": "g_once_init_enter", "contents": "g_once_init_enter (${1:volatile void *location})"},
    {"trigger": "g_once_init_leave", "contents": "g_once_init_leave (${1:volatile void *location}, ${2:gsize result})"},
    {"trigger": "g_bit_lock", "contents": "g_bit_lock (${1:volatile gint *address}, ${2:gint lock_bit})"},
    {"trigger": "g_bit_trylock", "contents": "g_bit_trylock (${1:volatile gint *address}, ${2:gint lock_bit})"},
    {"trigger": "g_bit_unlock", "contents": "g_bit_unlock (${1:volatile gint *address}, ${2:gint lock_bit})"},
    {"trigger": "g_pointer_bit_lock", "contents": "g_pointer_bit_lock (${1:volatile void *address}, ${2:gint lock_bit})"},
    {"trigger": "g_pointer_bit_trylock", "contents": "g_pointer_bit_trylock (${1:volatile void *address}, ${2:gint lock_bit})"},
    {"trigger": "g_pointer_bit_unlock", "contents": "g_pointer_bit_unlock (${1:volatile void *address}, ${2:gint lock_bit})"},
    {"trigger": "g_get_num_processors", "contents": "g_get_num_processors ()"},
    "G_THREAD_ERROR",
    "GThreadError",
    "GThread",
    "GMutex",
    "GRecMutex",
    "GRWLock",
    "GCond",
    "GPrivate",
    "GOnce",
    "GOnceStatus",
    "G_ONCE_INIT",

    {"trigger": "g_thread_pool_new", "contents": "g_thread_pool_new (${1:GFunc func}, ${2:gpointer user_data}, ${3:gint max_threads}, ${4:gboolean exclusive}, ${5:GError **error})"},
    {"trigger": "g_thread_pool_push", "contents": "g_thread_pool_push (${1:GThreadPool *pool}, ${2:gpointer data}, ${3:GError **error})"},
    {"trigger": "g_thread_pool_set_max_threads", "contents": "g_thread_pool_set_max_threads (${1:GThreadPool *pool}, ${2:gint max_threads}, ${3:GError **error})"},
    {"trigger": "g_thread_pool_get_max_threads", "contents": "g_thread_pool_get_max_threads (${1:GThreadPool *pool})"},
    {"trigger": "g_thread_pool_get_num_threads", "contents": "g_thread_pool_get_num_threads (${1:GThreadPool *pool})"},
    {"trigger": "g_thread_pool_unprocessed", "contents": "g_thread_pool_unprocessed (${1:GThreadPool *pool})"},
    {"trigger": "g_thread_pool_free", "contents": "g_thread_pool_free (${1:GThreadPool *pool}, ${2:gboolean immediate}, ${3:gboolean wait_})"},
    {"trigger": "g_thread_pool_set_max_unused_threads", "contents": "g_thread_pool_set_max_unused_threads (${1:gint max_threads})"},
    {"trigger": "g_thread_pool_get_max_unused_threads", "contents": "g_thread_pool_get_max_unused_threads ()"},
    {"trigger": "g_thread_pool_get_num_unused_threads", "contents": "g_thread_pool_get_num_unused_threads ()"},
    {"trigger": "g_thread_pool_stop_unused_threads", "contents": "g_thread_pool_stop_unused_threads ()"},
    {"trigger": "g_thread_pool_set_sort_function", "contents": "g_thread_pool_set_sort_function (${1:GThreadPool *pool}, ${2:GCompareDataFunc func}, ${3:gpointer user_data})"},
    {"trigger": "g_thread_pool_set_max_idle_time", "contents": "g_thread_pool_set_max_idle_time (${1:guint interval})"},
    {"trigger": "g_thread_pool_get_max_idle_time", "contents": "g_thread_pool_get_max_idle_time ()"},
    "GThreadPool",

    {"trigger": "g_async_queue_new", "contents": "g_async_queue_new ()"},
    {"trigger": "g_async_queue_new_full", "contents": "g_async_queue_new_full (${1:GDestroyNotify item_free_func})"},
    {"trigger": "g_async_queue_ref", "contents": "g_async_queue_ref (${1:GAsyncQueue *queue})"},
    {"trigger": "g_async_queue_unref", "contents": "g_async_queue_unref (${1:GAsyncQueue *queue})"},
    {"trigger": "g_async_queue_push", "contents": "g_async_queue_push (${1:GAsyncQueue *queue}, ${2:gpointer data})"},
    {"trigger": "g_async_queue_push_sorted", "contents": "g_async_queue_push_sorted (${1:GAsyncQueue *queue}, ${2:gpointer data}, ${3:GCompareDataFunc func}, ${4:gpointer user_data})"}, 
    {"trigger": "g_async_queue_pop", "contents": "g_async_queue_pop (${1:GAsyncQueue *queue})"}, 
    {"trigger": "g_async_queue_try_pop", "contents": "g_async_queue_try_pop (${1:GAsyncQueue *queue})"}, 
    {"trigger": "g_async_queue_timeout_pop", "contents": "g_async_queue_timeout_pop (${1:GAsyncQueue *queue}, ${2:guint64 timeout})"}, 
    {"trigger": "g_async_queue_length", "contents": "g_async_queue_length (${1:GAsyncQueue *queue})"},
    {"trigger": "g_async_queue_sort", "contents": "g_async_queue_sort (${1:GAsyncQueue *queue}, ${2:GCompareDataFunc func}, ${3:gpointer user_data})"},
    {"trigger": "g_async_queue_lock", "contents": "g_async_queue_lock (${1:GAsyncQueue *queue})"},
    {"trigger": "g_async_queue_unlock", "contents": "g_async_queue_unlock (${1:GAsyncQueue *queue})"},
    {"trigger": "g_async_queue_ref_unlocked", "contents": "g_async_queue_ref_unlocked (${1:GAsyncQueue *queue})"},
    {"trigger": "g_async_queue_unref_and_unlock", "contents": "g_async_queue_unref_and_unlock (${1:GAsyncQueue *queue})"},
    {"trigger": "g_async_queue_push_unlocked", "contents": "g_async_queue_push_unlocked (${1:GAsyncQueue *queue}, ${2:gpointer data})"},
    {"trigger": "g_async_queue_push_sorted_unlocked", "contents": "g_async_queue_push_sorted_unlocked (${1:GAsyncQueue *queue}, ${2:gpointer data}, ${3:GCompareDataFunc func}, ${4:gpointer user_data})"}, 
    {"trigger": "g_async_queue_pop_unlocked", "contents": "g_async_queue_pop_unlocked (${1:GAsyncQueue *queue})"}, 
    {"trigger": "g_async_queue_try_pop_unlocked", "contents": "g_async_queue_try_pop_unlocked (${1:GAsyncQueue *queue})"}, 
    {"trigger": "g_async_queue_timeout_pop_unlocked", "contents": "g_async_queue_timeout_pop_unlocked (${1:GAsyncQueue *queue}, ${2:guint64 timeout})"}, 
    {"trigger": "g_async_queue_length_unlocked", "contents": "g_async_queue_length_unlocked (${1:GAsyncQueue *queue})"}, 
    {"trigger": "g_async_queue_sort_unlocked", "contents": "g_async_queue_sort_unlocked (${1:GAsyncQueue *queue}, ${2:GCompareDataFunc func}, ${3:gpointer user_data})"}, 
    {"trigger": "g_async_queue_timed_pop", "contents": "g_async_queue_timed_pop (${1:GAsyncQueue *queue}, ${2:GTimeVal *end_time})"}, 
    {"trigger": "g_async_queue_timed_pop_unlocked", "contents": "g_async_queue_timed_pop_unlocked (${1:GAsyncQueue *queue}, ${2:GTimeVal *end_time})"}, 
    "GAsyncQueue",

    {"trigger": "g_module_supported", "contents": "g_module_supported ()"}, 
    {"trigger": "g_module_build_path", "contents": "g_module_build_path (${1:const gchar *directory}, ${2:const gchar *module_name})"}, 
    {"trigger": "g_module_open", "contents": "g_module_open (${1:const gchar *file_name}, ${2:GModuleFlags flags})"}, 
    {"trigger": "g_module_symbol", "contents": "g_module_symbol (${1:GModule *module}, ${2:const gchar *symbol_name}, ${3:gpointer *symbol})"}, 
    {"trigger": "g_module_name", "contents": "g_module_name (${1:GModule *module})"}, 
    {"trigger": "g_module_make_resident", "contents": "g_module_make_resident (${1:GModule *module})"}, 
    {"trigger": "g_module_close", "contents": "g_module_close (${1:GModule *module})"}, 
    {"trigger": "g_module_error", "contents": "g_module_error ()"}, 
    {"trigger": "GModuleCheckInit", "contents": "GModuleCheckInit (${1:GModule *module})"}, 
    {"trigger": "GModuleUnload", "contents": "GModuleUnload (${1:GModule *module})"}, 
    "GModule",
    "G_MODULE_BIND_LAZY",
    "G_MODULE_BIND_LOCAL",
    "G_MODULE_BIND_MASK",
    "G_MODULE_SUFFIX",
    "G_MODULE_EXPORT",
    "G_MODULE_IMPORT",

    {"trigger": "g_new", "contents": "g_new (${1:struct_type}, ${2:n_structs})"},
    {"trigger": "g_new0", "contents": "g_new0 (${1:struct_type}, ${2:n_structs})"},
    {"trigger": "g_renew", "contents": "g_renew (${1:struct_type}, ${2:mem}, ${3:n_structs})"},
    {"trigger": "g_try_new", "contents": "g_try_new (${1:struct_type}, ${2:n_structs})"},
    {"trigger": "g_try_new0", "contents": "g_try_new0 (${1:struct_type}, ${2:n_structs})"},
    {"trigger": "g_try_renew", "contents": "g_try_renew (${1:struct_type}, ${2:mem}, ${3:n_structs})"},
    {"trigger": "g_malloc", "contents": "g_malloc (${1:gsize n_bytes})"},
    {"trigger": "g_malloc0", "contents": "g_malloc0 (${1:gsize n_bytes})"},
    {"trigger": "g_realloc", "contents": "g_realloc (${1:gpointer mem}, ${2:gsize n_bytes})"},
    {"trigger": "g_try_malloc", "contents": "g_try_malloc (${1:gsize n_bytes})"},
    {"trigger": "g_try_malloc0", "contents": "g_try_malloc0 (${1:gsize n_bytes})"},
    {"trigger": "g_try_realloc", "contents": "g_try_realloc (${1:gpointer mem}, ${2:gsize n_bytes})"},
    {"trigger": "g_malloc_n", "contents": "g_malloc_n (${1:gsize n_blocks}, ${2:gsize n_block_bytes})"},
    {"trigger": "g_malloc0_n", "contents": "g_malloc0_n (${1:gsize n_blocks}, ${2:gsize n_block_bytes})"},
    {"trigger": "g_realloc_n", "contents": "g_realloc_n (${1:gpointer mem}, ${2:gsize n_blocks}, ${3:gsize n_block_bytes})"},
    {"trigger": "g_try_malloc_n", "contents": "g_try_malloc_n (${1:gsize n_blocks}, ${2:gsize n_block_bytes})"},
    {"trigger": "g_try_malloc0_n", "contents": "g_try_malloc0_n (${1:gsize n_blocks}, ${2:gsize n_block_bytes})"},
    {"trigger": "g_try_realloc_n", "contents": "g_try_realloc_n (${1:gpointer mem}, ${2:gsize n_blocks}, ${3:gsize n_block_bytes})"},
    {"trigger": "g_free", "contents": "g_free (${1:gpointer mem})"},
    {"trigger": "g_clear_pointer", "contents": "g_clear_pointer (${1:gpointer *pp}, ${2:GDestroyNotify destroy})"},
    {"trigger": "g_alloca", "contents": "g_alloca (${1:size})"},
    {"trigger": "g_newa", "contents": "g_newa (${1:struct_type}, ${2:n_structs})"},
    {"trigger": "g_memmove", "contents": "g_memmove (${1:dest}, ${2:src}, ${3:len})"},
    {"trigger": "g_memdup", "contents": "g_memdup (${1:gconstpointer mem}, ${2:guint byte_size})"},
    {"trigger": "g_mem_set_vtable", "contents": "g_mem_set_vtable (${1:GMemVTable *vtable})"},
    {"trigger": "g_mem_is_system_malloc", "contents": "g_mem_is_system_malloc ()"},
    {"trigger": "g_mem_profile", "contents": "g_mem_profile ()"},
    "g_mem_gc_friendly",
    "GMemVTable",
    "glib_mem_profiler_table",

    {"trigger": "g_slice_alloc", "contents": "g_slice_alloc (${1:gsize block_size})"},
    {"trigger": "g_slice_alloc0", "contents": "g_slice_alloc0 (${1:gsize block_size})"},
    {"trigger": "g_slice_copy", "contents": "g_slice_copy (${1:gsize block_size}, ${2:gconstpointer mem_block})"},
    {"trigger": "g_slice_free1", "contents": "g_slice_free1 (${1:gsize block_size}, ${2:gpointer mem_block})"},
    {"trigger": "g_slice_free_chain_with_offset", "contents": "g_slice_free_chain_with_offset (${1:gsize block_size}, ${2:gpointer mem_chain}, ${3:gsize next_offset})"},
    {"trigger": "g_slice_new", "contents": "g_slice_new (${1:type})"},
    {"trigger": "g_slice_new0", "contents": "g_slice_new0 (${1:type})"},
    {"trigger": "g_slice_dup", "contents": "g_slice_dup (${1:type}, ${2:mem})"},
    {"trigger": "g_slice_free", "contents": "g_slice_free (${1:type}, ${2:mem})"},
    {"trigger": "g_slice_free_chain", "contents": "g_slice_free_chain (${1:type}, ${2:mem_chain}, ${3:next})"},

    {"trigger": "g_io_channel_unix_new", "contents": "g_io_channel_unix_new (${1:int fd})"},
    {"trigger": "g_io_channel_unix_get_fd", "contents": "g_io_channel_unix_get_fd (${1:GIOChannel *channel})"},
    {"trigger": "g_io_channel_win32_new_fd", "contents": "g_io_channel_win32_new_fd (${1:gint fd})"},
    {"trigger": "g_io_channel_win32_new_socket", "contents": "g_io_channel_win32_new_socket (${1:gint socket})"},
    {"trigger": "g_io_channel_win32_new_messages", "contents": "g_io_channel_win32_new_messages (${1:gsize hwnd})"},
    {"trigger": "g_io_channel_init", "contents": "g_io_channel_init (${1:GIOChannel *g_io_channel_init})"},
    {"trigger": "g_io_channel_new_file", "contents": "g_io_channel_new_file (${1:const gchar *filename}, ${2:const gchar *mode}, ${3:GError **error})"},
    {"trigger": "g_io_channel_read_chars", "contents": "g_io_channel_read_chars (${1:GIOChannel *channel}, ${2:gchar *buf}, ${3:gsize count}, ${4:gsize *bytes_read}, ${5:GError **error})"},
    {"trigger": "g_io_channel_read_unichar", "contents": "g_io_channel_read_unichar (${1:GIOChannel *channel}, ${2:gunichar *thechar}, ${3:GError **error})"},
    {"trigger": "g_io_channel_read_line", "contents": "g_io_channel_read_line (${1:GIOChannel *channel}, ${2:gchar **str_return}, ${3:gsize *length}, ${4:gsize *terminator_pos}, ${5:GError **error})"},
    {"trigger": "g_io_channel_read_line_string", "contents": "g_io_channel_read_line_string (${1:GIOChannel *channel}, ${2:GString *buffer}, ${3:gsize *terminator_pos}, ${4:GError **error})"},
    {"trigger": "g_io_channel_read_to_end", "contents": "g_io_channel_read_to_end (${1:GIOChannel *channel}, ${2:gchar **str_return}, ${3:gsize *length}, ${4:GError **error})"},
    {"trigger": "g_io_channel_write_chars", "contents": "g_io_channel_write_chars (${1:GIOChannel *channel}, ${2:const gchar *buf}, ${3:gssize count}, ${4:gsize *bytes_written}, ${5:GError **error})"},
    {"trigger": "g_io_channel_write_unichar", "contents": "g_io_channel_write_unichar (${1:GIOChannel *channel}, ${2:gunichar thechar}, ${3:GError **error})"},
    {"trigger": "g_io_channel_flush", "contents": "g_io_channel_flush (${1:GIOChannel *channel}, ${2:GError **error})"},
    {"trigger": "g_io_channel_seek_position", "contents": "g_io_channel_seek_position (${1:GIOChannel *channel}, ${2:gint64 offset}, ${3:GSeekType type}, ${4:GError **error})"}, 
    {"trigger": "g_io_channel_shutdown", "contents": "g_io_channel_shutdown (${1:GIOChannel *channel}, ${2:gboolean flush}, ${3:GError **err})"}, 
    {"trigger": "g_io_channel_error_from_errno", "contents": "g_io_channel_error_from_errno (${1:gint en})"}, 
    {"trigger": "g_io_channel_ref", "contents": "g_io_channel_ref (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_channel_unref", "contents": "g_io_channel_unref (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_create_watch", "contents": "g_io_create_watch (${1:GIOChannel *channel}, ${2:GIOCondition condition})"}, 
    {"trigger": "g_io_add_watch", "contents": "g_io_add_watch (${1:GIOChannel *channel}, ${2:GIOCondition condition}, ${3:GIOFunc func}, ${4:gpointer user_data})"}, 
    {"trigger": "g_io_add_watch_full", "contents": "g_io_add_watch_full (${1:GIOChannel *channel}, ${2:gint priority}, ${3:GIOCondition condition}, ${4:GIOFunc func}, ${5:gpointer user_data}, ${6:GDestroyNotify notify})"}, 
    {"trigger": "GIOFunc", "contents": "GIOFunc (${1:GIOChannel *source}, ${2:GIOCondition condition}, ${3:gpointer data})"}, 
    {"trigger": "g_io_channel_get_buffer_size", "contents": "g_io_channel_get_buffer_size (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_channel_set_buffer_size", "contents": "g_io_channel_set_buffer_size (${1:GIOChannel *channel}, ${2:gsize size})"}, 
    {"trigger": "g_io_channel_get_buffer_condition", "contents": "g_io_channel_get_buffer_condition (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_channel_get_flags", "contents": "g_io_channel_get_flags (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_channel_set_flags", "contents": "g_io_channel_set_flags (${1:GIOChannel *channel}, ${2: GIOFlags flags}, ${3:GError **error})"}, 
    {"trigger": "g_io_channel_get_line_term", "contents": "g_io_channel_get_line_term (${1:GIOChannel *channel}, ${2:gint *length})"}, 
    {"trigger": "g_io_channel_set_line_term", "contents": "g_io_channel_set_line_term (${1:GIOChannel *channel}, ${2:gint *length}, ${3:gint length})"}, 
    {"trigger": "g_io_channel_get_buffered", "contents": "g_io_channel_get_buffered (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_channel_set_buffered", "contents": "g_io_channel_set_buffered (${1:GIOChannel *channel}, ${2:gboolean buffered})"}, 
    {"trigger": "g_io_channel_get_encoding", "contents": "g_io_channel_get_encoding (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_channel_set_encoding", "contents": "g_io_channel_set_encoding (${1:GIOChannel *channel}, ${2:const gchar *encoding}, ${3:GError **error})"}, 
    {"trigger": "g_io_channel_get_close_on_unref", "contents": "g_io_channel_get_close_on_unref (${1:GIOChannel *channel})"}, 
    {"trigger": "g_io_channel_set_close_on_unref", "contents": "g_io_channel_set_close_on_unref (${1:GIOChannel *channel}, ${2:gboolean do_close})"}, 
    {"trigger": "g_io_channel_read", "contents": "g_io_channel_read (${1:GIOChannel *channel}, ${2:gchar *buf}, ${3:gsize count}, ${4:gsize *bytes_read})"}, 
    {"trigger": "g_io_channel_seek", "contents": "g_io_channel_seek (${1:GIOChannel *channel}, ${2:gint64 offset}, ${3:GSeekType type})"}, 
    {"trigger": "g_io_channel_close", "contents": "g_io_channel_close (${1:GIOChannel *channel})"}, 
    "GIOChannel",
    "GSeekType",
    "G_SEEK_CUR",
    "G_SEEK_SET",
    "G_SEEK_END",
    "GIOStatus",
    "G_IO_STATUS_ERROR",
    "G_IO_STATUS_NORMAL",
    "G_IO_STATUS_EOF",
    "G_IO_STATUS_AGAIN",
    "GIOChannelError",
    "G_IO_CHANNEL_ERROR_FBIG",
    "G_IO_CHANNEL_ERROR_INVAL",
    "G_IO_CHANNEL_ERROR_IO",
    "G_IO_CHANNEL_ERROR_ISDIR",
    "G_IO_CHANNEL_ERROR_NOSPC",
    "G_IO_CHANNEL_ERROR_NXIO",
    "G_IO_CHANNEL_ERROR_OVERFLOW",
    "G_IO_CHANNEL_ERROR_PIPE",
    "G_IO_CHANNEL_ERROR_FAILED",
    "G_IO_CHANNEL_ERROR",
    "GIOCondition",
    "G_IO_IN",
    "G_IO_OUT",
    "G_IO_PRI",
    "G_IO_ERR",
    "G_IO_HUP",
    "G_IO_NVAL",
    "GIOFlags",
    "G_IO_FLAG_APPEND",
    "G_IO_FLAG_NONBLOCK",
    "G_IO_FLAG_IS_READABLE",
    "G_IO_FLAG_IS_WRITABLE",
    "G_IO_FLAG_IS_WRITEABLE",
    "G_IO_FLAG_IS_SEEKABLE",
    "G_IO_FLAG_MASK",
    "G_IO_FLAG_GET_MASK",
    "G_IO_FLAG_SET_MASK",
    "GIOError",
    "G_IO_ERROR_NONE",
    "G_IO_ERROR_AGAIN",
    "G_IO_ERROR_INVAL",
    "G_IO_ERROR_UNKNOWN",

    {"trigger": "g_error_new", "contents": "g_error_new (${1:GQuark domain}, ${2:gint code}, ${3:const gchar *format}${4:,...})"},
    {"trigger": "g_error_new_literal", "contents": "g_error_new_literal (${1:GQuark domain}, ${2:gint code}, ${3:const gchar *message})"},
    {"trigger": "g_error_new_valist", "contents": "g_error_new_valist (${1:GQuark domain}, ${2:gint code}, ${3:const gchar *format}, ${4:va_list args})"},
    {"trigger": "g_error_free", "contents": "g_error_free (${1:GError *error})"},
    {"trigger": "g_error_copy", "contents": "g_error_copy (${1:const GError *error})"},
    {"trigger": "g_error_matches", "contents": "g_error_matches (${1:const GError *error}, ${2:GQuark domain}, ${3:gint code})"},
    {"trigger": "g_set_error", "contents": "g_set_error (${1:GError **err}, ${2:GQuark domain}, ${3:gint code}, ${4:const gchar *format}${4:,...})"},
    {"trigger": "g_set_error_literal", "contents": "g_set_error_literal (${1:GError **err}, ${2:GQuark domain}, ${3:gint code}, ${4:const gchar *message})"},
    {"trigger": "g_propagate_error", "contents": "g_propagate_error (${1:GError **dest}, ${2:GError *src})"},
    {"trigger": "g_clear_error", "contents": "g_clear_error (${1:GError **err})"},
    {"trigger": "g_prefix_error", "contents": "g_prefix_error (${1:GError **err}, ${2:const gchar *format}${3:,...})"},
    {"trigger": "g_propagate_prefixed_error", "contents": "g_propagate_prefixed_error (${1:GError **dest}, ${2:GError *src}, ${3:const gchar *format}${4:,...})"},

    {"trigger": "g_print", "contents": "g_print (${1:const gchar *format}${2:,...})"},
    {"trigger": "g_set_print_handler", "contents": "g_set_print_handler (${1:GPrintFunc func})"},
    {"trigger": "GPrintFunc", "contents": "GPrintFunc (${1:const gchar *string})"},
    {"trigger": "g_printerr", "contents": "g_printerr (${1:const gchar *format}${2:,...})"},
    {"trigger": "g_set_printerr_handler", "contents": "g_set_printerr_handler (${1:GPrintFunc func})"},
    {"trigger": "g_return_if_fail", "contents": "g_return_if_fail (${1:expr})"},
    {"trigger": "g_return_val_if_fail", "contents": "g_return_val_if_fail (${1:expr}, ${2:val})"},
    {"trigger": "g_return_if_reached", "contents": "g_return_if_reached ()"},
    {"trigger": "g_return_val_if_reached", "contents": "g_return_val_if_reached (${1:val})"},
    {"trigger": "g_warn_if_fail", "contents": "g_warn_if_fail (${1:expr})"},
    {"trigger": "g_warn_if_reached", "contents": "g_warn_if_reached ()"},
    {"trigger": "g_on_error_query", "contents": "g_on_error_query (${1:const gchar *prg_name})"},
    {"trigger": "g_on_error_stack_trace", "contents": "g_on_error_stack_trace (${1:const gchar *prg_name})"},
    {"trigger": "G_BREAKPOINT", "contents": "G_BREAKPOINT ()"},

    {"trigger": "G_LOG_DOMAIN", "contents": "G_LOG_DOMAIN (${1:(gchar*) 0})"},
    {"trigger": "G_LOG_FATAL_MASK", "contents": "G_LOG_FATAL_MASK (${1:G_LOG_FLAG_RECURSION | G_LOG_LEVEL_ERROR})"},
    {"trigger": "G_LOG_LEVEL_USER_SHIFT", "contents": "G_LOG_LEVEL_USER_SHIFT (${1:8})"},
    {"trigger": "GLogFunc", "contents": "GLogFunc (${1:const gchar *log_domain}, ${2:GLogLevelFlags log_level}, ${3:const gchar *message}, ${4:gpointer user_data})"}, 
    {"trigger": "g_log", "contents": "g_log (${1:const gchar *log_domain}, ${2:GLogLevelFlags log_level}, ${3:const gchar *format}${4,...})"}, 
    {"trigger": "g_logv", "contents": "g_logv (${1:const gchar *log_domain}, ${2:GLogLevelFlags log_level}, ${3:const gchar *format}, ${4:va_list args})"}, 
    {"trigger": "g_message", "contents": "g_message (${1:...})"}, 
    {"trigger": "g_warning", "contents": "g_warning (${1:...})"}, 
    {"trigger": "g_critical", "contents": "g_critical (${1:...})"}, 
    {"trigger": "g_error", "contents": "g_error (${1:...})"}, 
    {"trigger": "g_info", "contents": "g_info (${1:...})"}, 
    {"trigger": "g_debug", "contents": "g_debug (${1:...})"}, 
    {"trigger": "g_log_set_handler", "contents": "g_log_set_handler (${1:const gchar *log_domain}, ${2:GLogLevelFlags log_levels}, ${3:GLogFunc log_func}, ${4:gpointer user_data})"}, 
    {"trigger": "g_log_remove_handler", "contents": "g_log_remove_handler (${1:const gchar *log_domain}, ${2:guint handler_id})"}, 
    {"trigger": "g_log_set_always_fatal", "contents": "g_log_set_always_fatal (${1:GLogLevelFlags fatal_mask})"}, 
    {"trigger": "g_log_set_fatal_mask", "contents": "g_log_set_fatal_mask (${1:const gchar *log_domain}, ${2:GLogLevelFlags fatal_mask})"}, 
    {"trigger": "g_log_default_handler", "contents": "g_log_default_handler (${1:const gchar *log_domain}, ${2:GLogLevelFlags log_level}, ${3:const gchar *message}, ${4:gpointer unused_data})"}, 
    {"trigger": "g_log_set_default_handler", "contents": "g_log_set_default_handler (${1:GLogFunc log_func}, ${2:gpointer user_data})"}, 
    "GLogLevelFlags",
    "G_LOG_FLAG_RECURSION",
    "G_LOG_FLAG_FATAL",
    "G_LOG_LEVEL_ERROR",
    "G_LOG_LEVEL_CRITICAL",
    "G_LOG_LEVEL_WARNING",
    "G_LOG_LEVEL_MESSAGE",
    "G_LOG_LEVEL_INFO",
    "G_LOG_LEVEL_DEBUG",
    "G_LOG_LEVEL_MASK",

    {"trigger": "g_strdup", "contents": "g_strdup (${1:const gchar *str})"},
    {"trigger": "g_strndup", "contents": "g_strndup (${1:const gchar *str}, ${2:gsize n})"},
    {"trigger": "g_strnfill", "contents": "g_strnfill (${1:gsize length}, ${2:gchar fill_char})"},
    {"trigger": "g_stpcpy", "contents": "g_stpcpy (${1:gchar *dest}, ${2:const char *src})"},
    {"trigger": "g_strstr_len", "contents": "g_strstr_len (${1:const gchar *haystack}, ${2:gssize haystack_len}, ${3:const gchar *needle})"},
    {"trigger": "g_strrstr", "contents": "g_strrstr (${1:const gchar *haystack}, ${2:const gchar *needle})"},
    {"trigger": "g_strrstr_len", "contents": "g_strrstr_len (${1:const gchar *haystack}, ${2:gssize haystack_len}, ${3:const gchar *needle})"},
    {"trigger": "g_str_has_prefix", "contents": "g_str_has_prefix (${1:const gchar *str}, ${2:const gchar *prefix})"},
    {"trigger": "g_str_has_suffix", "contents": "g_str_has_suffix (${1:const gchar *str}, ${2:const gchar *suffix})"},
    {"trigger": "g_str_to_ascii", "contents": "g_str_to_ascii (${1:const gchar *str}, ${2:const gchar *from_locale})"},
    {"trigger": "g_str_tokenize_and_fold", "contents": "g_str_tokenize_and_fold (${1:const gchar *string}, ${2:const gchar *translit_locale}, ${3:gchar ***ascii_alternates})"},
    {"trigger": "g_str_match_string", "contents": "g_str_match_string (${1:const gchar *search_term}, ${2:const gchar *potential_hit}, ${3:gboolean accept_alternates})"},
    {"trigger": "g_strlcpy", "contents": "g_strlcpy (${1:gchar *dest}, ${2:const gchar *src}, ${3:gsize dest_size})"},
    {"trigger": "g_strlcat", "contents": "g_strlcat (${1:gchar *dest}, ${2:const gchar *src}, ${3:gsize dest_size})"},
    {"trigger": "g_strdup_printf", "contents": "g_strdup_printf (${1:const gchar *format}${2:,...})"},
    {"trigger": "g_strdup_vprintf", "contents": "g_strdup_vprintf (${1:const gchar *format}, ${2:va_list args})"},
    {"trigger": "g_printf", "contents": "g_printf (${1:gchar const *format}, ${2:...})"},
    {"trigger": "g_vprintf", "contents": "g_vprintf (${1:gchar const *format}, ${2:va_list args})"},
    {"trigger": "g_fprintf", "contents": "g_fprintf (${1:FILE *file}, ${2:gchar const *format}${3:,...})"},
    {"trigger": "g_vfprintf", "contents": "g_vfprintf (${1:FILE *file}, ${2:gchar const *format}, ${3:va_list args})"},
    {"trigger": "g_sprintf", "contents": "g_sprintf (${1:gchar *string}, ${2:gchar const *format}${3:, ...})"},
    {"trigger": "g_vsprintf", "contents": "g_vsprintf (${1:gchar *string}, ${2:gchar const *format}, ${3:va_list args})"},
    {"trigger": "g_snprintf", "contents": "g_snprintf (${1:gchar *string}, ${2:gulong n}, ${3:gchar const *format}${4:,...})"},
    {"trigger": "g_vsnprintf", "contents": "g_vsnprintf (${1:gchar *string}, ${2:gulong n}, ${3:gchar const *format}, ${4:va_list args})"},
    {"trigger": "g_vasprintf", "contents": "g_vasprintf (${1:gchar **string}, ${2:gchar const *format}, ${3:va_list args})"}, 
    {"trigger": "g_printf_string_upper_bound", "contents": "g_printf_string_upper_bound (${1:const gchar *format}, ${2:va_list args})"}, 
    {"trigger": "g_str_is_ascii", "contents": "g_str_is_ascii (${1:const gchar *str})"}, 
    {"trigger": "g_ascii_isalnum", "contents": "g_ascii_isalnum (${1:gchar c})"}, 
    {"trigger": "g_ascii_isalpha", "contents": "g_ascii_isalpha (${1:gchar c})"}, 
    {"trigger": "g_ascii_iscntrl", "contents": "g_ascii_iscntrl (${1:gchar c})"}, 
    {"trigger": "g_ascii_isdigit", "contents": "g_ascii_isdigit (${1:gchar c})"}, 
    {"trigger": "g_ascii_isgraph", "contents": "g_ascii_isgraph (${1:gchar c})"}, 
    {"trigger": "g_ascii_islower", "contents": "g_ascii_islower (${1:gchar c})"}, 
    {"trigger": "g_ascii_isprint", "contents": "g_ascii_isprint (${1:gchar c})"}, 
    {"trigger": "g_ascii_ispunct", "contents": "g_ascii_ispunct (${1:gchar c})"}, 
    {"trigger": "g_ascii_isspace", "contents": "g_ascii_isspace (${1:gchar c})"}, 
    {"trigger": "g_ascii_isupper", "contents": "g_ascii_isupper (${1:gchar c})"}, 
    {"trigger": "g_ascii_isxdigit", "contents": "g_ascii_isxdigit (${1:gchar c})"}, 
    {"trigger": "g_ascii_digit_value", "contents": "g_ascii_digit_value (${1:gchar c})"},
    {"trigger": "g_ascii_xdigit_value", "contents": "g_ascii_xdigit_value (${1:gchar c})"},
    {"trigger": "g_ascii_strcasecmp", "contents": "g_ascii_strcasecmp (${1:const gchar *s1}, ${2:const gchar *s2})"}, 
    {"trigger": "g_ascii_strncasecmp", "contents": "g_ascii_strncasecmp (${1:const gchar *s1}, ${2:const gchar *s2}, ${3:gsize n})"}, 
    {"trigger": "g_ascii_strup", "contents": "g_ascii_strup (${1:const gchar *str}, ${2:gssize len})"}, 
    {"trigger": "g_ascii_strdown", "contents": "g_ascii_strdown (${1:const gchar *str}, ${2:gssize len})"}, 
    {"trigger": "g_ascii_tolower", "contents": "g_ascii_tolower (${1:gchar c})"}, 
    {"trigger": "g_ascii_toupper", "contents": "g_ascii_toupper (${1:gchar c})"}, 
    {"trigger": "g_string_ascii_up", "contents": "g_string_ascii_up (${1:GString *string})"}, 
    {"trigger": "g_string_ascii_down", "contents": "g_string_ascii_down (${1:GString *string})"}, 
    {"trigger": "g_strup", "contents": "g_strup (${1:gchar *string})"}, 
    {"trigger": "g_strdown", "contents": "g_strdown (${1:gchar *string})"}, 
    {"trigger": "g_strcasecmp", "contents": "g_strcasecmp (${1:const gchar *s1}, ${2:const gchar *s2})"}, 
    {"trigger": "g_strncasecmp", "contents": "g_strncasecmp (${1:const gchar *s1}, ${2:const gchar *s2}, ${3:guint n})"}, 
    {"trigger": "g_strreverse", "contents": "g_strreverse (${1:gchar *string})"}, 
    {"trigger": "g_ascii_strtoll", "contents": "g_ascii_strtoll (${1:const gchar *nptr}, ${2:gchar **endptr}, ${3:guint base})"}, 
    {"trigger": "g_ascii_strtoull", "contents": "g_ascii_strtoull (${1:const gchar *nptr}, ${2:gchar **endptr}, ${3:guint base})"}, 
    {"trigger": "G_ASCII_DTOSTR_BUF_SIZE", "contents": "G_ASCII_DTOSTR_BUF_SIZE (${1:29 + 10})"},
    {"trigger": "g_ascii_strtod", "contents": "g_ascii_strtod (${1:const gchar *nptr}, ${2:gchar **endptr})"},
    {"trigger": "g_ascii_dtostr", "contents": "g_ascii_dtostr (${1:gchar *buffer}, ${2:gint buf_len}, ${3:gdouble d})"},
    {"trigger": "g_strtod", "contents": "g_strtod (${1:const gchar *nptr}, ${2:gchar **endptr})"},
    {"trigger": "g_strchug", "contents": "g_strchug (${1:gchar *string})"},
    {"trigger": "g_strchomp", "contents": "g_strchomp (${1:gchar *string})"},
    {"trigger": "g_strstrip", "contents": "g_strstrip (${1:string})"},
    {"trigger": "g_strdelimit", "contents": "g_strdelimit (${1:gchar *string}, ${2:const gchar *delimiters}, ${3:gchar new_delimiter})"},
    {"trigger": "g_strescape", "contents": "g_strescape (${1:const gchar *source}, ${2:const gchar *exceptions})"},
    {"trigger": "g_strcompress", "contents": "g_strcompress (${1:const gchar *source})"},
    {"trigger": "g_strcanon", "contents": "g_strcanon (${1:gchar *string}, ${2:const gchar *valid_chars}, ${3:gchar substitutor})"},
    {"trigger": "g_strsplit", "contents": "g_strsplit (${1:const gchar *string}, ${2:const gchar *delimiter}, ${3:gint max_tokens})"},
    {"trigger": "g_strsplit_set", "contents": "g_strsplit_set (${1:const gchar *string}, ${2:const gchar *delimiters}, ${3:gint max_tokens})"},
    {"trigger": "g_strfreev", "contents": "g_strfreev (${1:gchar **str_array})"},
    {"trigger": "g_strconcat", "contents": "g_strconcat (${1:const gchar *string1}${2:,...})"},
    {"trigger": "g_strjoin", "contents": "g_strjoin (${1:const gchar *separator}${2:,...})"},
    {"trigger": "g_strjoinv", "contents": "g_strjoinv (${1:const gchar *separator}, ${2:gchar **str_array})"},
    {"trigger": "g_strv_length", "contents": "g_strv_length (${1:gchar **str_array})"},
    {"trigger": "g_strerror", "contents": "g_strerror (${1:gint errnum})"},
    {"trigger": "g_strsignal", "contents": "g_strsignal (${1:gint signum})"},
    "G_STR_DELIMITERS",

    {"trigger": "g_convert", "contents": "g_convert (${1:const gchar *str}, ${2:gssize len}, ${3:const gchar *to_codeset}, ${4:const gchar *from_codeset}, ${5:gsize *bytes_read}, ${6:gsize *bytes_written}, ${7:GError **error})"},
    {"trigger": "g_convert_with_fallback", "contents": "g_convert_with_fallback (${1:const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error})"},

  ],
}